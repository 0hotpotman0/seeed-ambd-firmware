/*
 * Generated by erpcgen 1.7.4 on Wed Aug 12 16:43:22 2020.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "rpc_ble_api_server.h"
#include <new>
#include "erpc_port.h"
#include "erpc_manually_constructed.h"

#if 10704 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif

static ManuallyConstructed<host_service> s_host_service;

static ManuallyConstructed<rpc_gap_adv_service> s_rpc_gap_adv_service;

static ManuallyConstructed<rpc_gap_le_service> s_rpc_gap_le_service;

static ManuallyConstructed<rpc_gap_scan_service> s_rpc_gap_scan_service;


//! @brief Function to read struct binary_t
static void read_binary_t_struct(erpc::Codec * codec, binary_t * data);


// Read struct binary_t function implementation
static void read_binary_t_struct(erpc::Codec * codec, binary_t * data)
{
    uint8_t * data_local;
    codec->readBinary(&data->dataLength, &data_local);
    data->data = (uint8_t *) erpc_malloc(data->dataLength * sizeof(uint8_t));
    if (data->data == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }
    else
    {
        memcpy(data->data, data_local, data->dataLength);
    }
}


//! @brief Function to write struct binary_t
static void write_binary_t_struct(erpc::Codec * codec, const binary_t * data);


// Write struct binary_t function implementation
static void write_binary_t_struct(erpc::Codec * codec, const binary_t * data)
{
    codec->writeBinary(data->dataLength, data->data);
}


//! @brief Function to free space allocated inside struct binary_t
static void free_binary_t_struct(binary_t * data);


// Free space allocated inside struct binary_t function implementation
static void free_binary_t_struct(binary_t * data)
{
    if (data->data)
    {
        erpc_free(data->data);
    }
}



// Call the correct server shim based on method unique ID.
erpc_status_t host_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    switch (methodId)
    {
        case khost__Ble_HostInitialize_id:
            return _Ble_HostInitialize_shim(codec, messageFactory, sequence);

        default:
            return kErpcStatus_InvalidArgument;
    }
}

// Server shim for _Ble_HostInitialize of host interface.
erpc_status_t host_service::_Ble_HostInitialize_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint8_t result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = _Ble_HostInitialize();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, khost_service_id, khost__Ble_HostInitialize_id, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

// Call the correct server shim based on method unique ID.
erpc_status_t rpc_gap_adv_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    switch (methodId)
    {
        case krpc_gap_adv_rpc_le_adv_set_param_id:
            return rpc_le_adv_set_param_shim(codec, messageFactory, sequence);

        case krpc_gap_adv_rpc_le_adv_get_param_id:
            return rpc_le_adv_get_param_shim(codec, messageFactory, sequence);

        case krpc_gap_adv_rpc_le_adv_start_id:
            return rpc_le_adv_start_shim(codec, messageFactory, sequence);

        case krpc_gap_adv_rpc_le_adv_stop_id:
            return rpc_le_adv_stop_shim(codec, messageFactory, sequence);

        case krpc_gap_adv_rpc_le_adv_update_param_id:
            return rpc_le_adv_update_param_shim(codec, messageFactory, sequence);

        default:
            return kErpcStatus_InvalidArgument;
    }
}

// Server shim for rpc_le_adv_set_param of rpc_gap_adv interface.
erpc_status_t rpc_gap_adv_service::rpc_le_adv_set_param_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    RPC_T_LE_ADV_PARAM_TYPE param;
    binary_t *value = NULL;
    value = (binary_t *) erpc_malloc(sizeof(binary_t));
    if (value == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }
    int32_t _tmp_local;
    RPC_T_GAP_CAUSE result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&_tmp_local);
    param = static_cast<RPC_T_LE_ADV_PARAM_TYPE>(_tmp_local);

    read_binary_t_struct(codec, value);

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_adv_set_param(param, value);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_adv_service_id, krpc_gap_adv_rpc_le_adv_set_param_id, sequence);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    if (value)
    {
        free_binary_t_struct(value);
    }
    if (value)
    {
        erpc_free(value);
    }

    return err;
}

// Server shim for rpc_le_adv_get_param of rpc_gap_adv interface.
erpc_status_t rpc_gap_adv_service::rpc_le_adv_get_param_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    RPC_T_LE_ADV_PARAM_TYPE param;
    binary_t *value = NULL;
    int32_t _tmp_local;
    RPC_T_GAP_CAUSE result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&_tmp_local);
    param = static_cast<RPC_T_LE_ADV_PARAM_TYPE>(_tmp_local);

    value = (binary_t *) erpc_malloc(sizeof(binary_t));
    if (value == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_adv_get_param(param, value);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_adv_service_id, krpc_gap_adv_rpc_le_adv_get_param_id, sequence);

        write_binary_t_struct(codec, value);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    if (value)
    {
        free_binary_t_struct(value);
    }
    if (value)
    {
        erpc_free(value);
    }

    return err;
}

// Server shim for rpc_le_adv_start of rpc_gap_adv interface.
erpc_status_t rpc_gap_adv_service::rpc_le_adv_start_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    RPC_T_GAP_CAUSE result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_adv_start();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_adv_service_id, krpc_gap_adv_rpc_le_adv_start_id, sequence);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    return err;
}

// Server shim for rpc_le_adv_stop of rpc_gap_adv interface.
erpc_status_t rpc_gap_adv_service::rpc_le_adv_stop_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    RPC_T_GAP_CAUSE result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_adv_stop();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_adv_service_id, krpc_gap_adv_rpc_le_adv_stop_id, sequence);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    return err;
}

// Server shim for rpc_le_adv_update_param of rpc_gap_adv interface.
erpc_status_t rpc_gap_adv_service::rpc_le_adv_update_param_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    RPC_T_GAP_CAUSE result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_adv_update_param();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_adv_service_id, krpc_gap_adv_rpc_le_adv_update_param_id, sequence);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    return err;
}

// Call the correct server shim based on method unique ID.
erpc_status_t rpc_gap_le_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    switch (methodId)
    {
        case krpc_gap_le_rpc_le_gap_init_id:
            return rpc_le_gap_init_shim(codec, messageFactory, sequence);

        case krpc_gap_le_rpc_le_gap_msg_info_way_id:
            return rpc_le_gap_msg_info_way_shim(codec, messageFactory, sequence);

        case krpc_gap_le_rpc_le_get_max_link_num_id:
            return rpc_le_get_max_link_num_shim(codec, messageFactory, sequence);

        case krpc_gap_le_rpc_le_set_gap_param_id:
            return rpc_le_set_gap_param_shim(codec, messageFactory, sequence);

        case krpc_gap_le_rpc_le_get_param_id:
            return rpc_le_get_param_shim(codec, messageFactory, sequence);

        case krpc_gap_le_rpc_modify_white_list_id:
            return rpc_modify_white_list_shim(codec, messageFactory, sequence);

        case krpc_gap_le_rpc_le_gen_rand_addr_id:
            return rpc_le_gen_rand_addr_shim(codec, messageFactory, sequence);

        case krpc_gap_le_rpc_le_set_rand_addr_id:
            return rpc_le_set_rand_addr_shim(codec, messageFactory, sequence);

        default:
            return kErpcStatus_InvalidArgument;
    }
}

// Server shim for rpc_le_gap_init of rpc_gap_le interface.
erpc_status_t rpc_gap_le_service::rpc_le_gap_init_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint8_t link_num;
    bool result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&link_num);

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_gap_init(link_num);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_le_service_id, krpc_gap_le_rpc_le_gap_init_id, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for rpc_le_gap_msg_info_way of rpc_gap_le interface.
erpc_status_t rpc_gap_le_service::rpc_le_gap_msg_info_way_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    bool use_msg;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&use_msg);

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        rpc_le_gap_msg_info_way(use_msg);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_le_service_id, krpc_gap_le_rpc_le_gap_msg_info_way_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for rpc_le_get_max_link_num of rpc_gap_le interface.
erpc_status_t rpc_gap_le_service::rpc_le_get_max_link_num_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint8_t result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_get_max_link_num();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_le_service_id, krpc_gap_le_rpc_le_get_max_link_num_id, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for rpc_le_set_gap_param of rpc_gap_le interface.
erpc_status_t rpc_gap_le_service::rpc_le_set_gap_param_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    RPC_T_GAP_LE_PARAM_TYPE param;
    binary_t *value = NULL;
    value = (binary_t *) erpc_malloc(sizeof(binary_t));
    if (value == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }
    int32_t _tmp_local;
    RPC_T_GAP_CAUSE result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&_tmp_local);
    param = static_cast<RPC_T_GAP_LE_PARAM_TYPE>(_tmp_local);

    read_binary_t_struct(codec, value);

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_set_gap_param(param, value);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_le_service_id, krpc_gap_le_rpc_le_set_gap_param_id, sequence);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    if (value)
    {
        free_binary_t_struct(value);
    }
    if (value)
    {
        erpc_free(value);
    }

    return err;
}

// Server shim for rpc_le_get_param of rpc_gap_le interface.
erpc_status_t rpc_gap_le_service::rpc_le_get_param_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    RPC_T_GAP_LE_PARAM_TYPE param;
    binary_t *value = NULL;
    int32_t _tmp_local;
    RPC_T_GAP_CAUSE result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&_tmp_local);
    param = static_cast<RPC_T_GAP_LE_PARAM_TYPE>(_tmp_local);

    value = (binary_t *) erpc_malloc(sizeof(binary_t));
    if (value == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_get_param(param, value);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_le_service_id, krpc_gap_le_rpc_le_get_param_id, sequence);

        write_binary_t_struct(codec, value);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    if (value)
    {
        free_binary_t_struct(value);
    }
    if (value)
    {
        erpc_free(value);
    }

    return err;
}

// Server shim for rpc_modify_white_list of rpc_gap_le interface.
erpc_status_t rpc_gap_le_service::rpc_modify_white_list_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    RPC_T_GAP_WHITE_LIST_OP operation;
    binary_t *bd_addr = NULL;
    bd_addr = (binary_t *) erpc_malloc(sizeof(binary_t));
    if (bd_addr == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }
    RPC_T_GAP_REMOTE_ADDR_TYPE bd_type;
    int32_t _tmp_local;
    RPC_T_GAP_CAUSE result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&_tmp_local);
    operation = static_cast<RPC_T_GAP_WHITE_LIST_OP>(_tmp_local);

    read_binary_t_struct(codec, bd_addr);

    codec->read(&_tmp_local);
    bd_type = static_cast<RPC_T_GAP_REMOTE_ADDR_TYPE>(_tmp_local);

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_modify_white_list(operation, bd_addr, bd_type);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_le_service_id, krpc_gap_le_rpc_modify_white_list_id, sequence);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    if (bd_addr)
    {
        free_binary_t_struct(bd_addr);
    }
    if (bd_addr)
    {
        erpc_free(bd_addr);
    }

    return err;
}

// Server shim for rpc_le_gen_rand_addr of rpc_gap_le interface.
erpc_status_t rpc_gap_le_service::rpc_le_gen_rand_addr_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    RPC_T_GAP_RAND_ADDR_TYPE rand_addr_type;
    binary_t *random_bd = NULL;
    int32_t _tmp_local;
    RPC_T_GAP_CAUSE result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&_tmp_local);
    rand_addr_type = static_cast<RPC_T_GAP_RAND_ADDR_TYPE>(_tmp_local);

    random_bd = (binary_t *) erpc_malloc(sizeof(binary_t));
    if (random_bd == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_gen_rand_addr(rand_addr_type, random_bd);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_le_service_id, krpc_gap_le_rpc_le_gen_rand_addr_id, sequence);

        write_binary_t_struct(codec, random_bd);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    if (random_bd)
    {
        free_binary_t_struct(random_bd);
    }
    if (random_bd)
    {
        erpc_free(random_bd);
    }

    return err;
}

// Server shim for rpc_le_set_rand_addr of rpc_gap_le interface.
erpc_status_t rpc_gap_le_service::rpc_le_set_rand_addr_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    binary_t *random_bd = NULL;
    random_bd = (binary_t *) erpc_malloc(sizeof(binary_t));
    if (random_bd == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }
    RPC_T_GAP_CAUSE result;

    // startReadMessage() was already called before this shim was invoked.

    read_binary_t_struct(codec, random_bd);

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_set_rand_addr(random_bd);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_le_service_id, krpc_gap_le_rpc_le_set_rand_addr_id, sequence);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    if (random_bd)
    {
        free_binary_t_struct(random_bd);
    }
    if (random_bd)
    {
        erpc_free(random_bd);
    }

    return err;
}

// Call the correct server shim based on method unique ID.
erpc_status_t rpc_gap_scan_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    switch (methodId)
    {
        case krpc_gap_scan_rpc_le_scan_set_param_id:
            return rpc_le_scan_set_param_shim(codec, messageFactory, sequence);

        case krpc_gap_scan_rpc_le_scan_get_param_id:
            return rpc_le_scan_get_param_shim(codec, messageFactory, sequence);

        case krpc_gap_scan_rpc_le_scan_start_id:
            return rpc_le_scan_start_shim(codec, messageFactory, sequence);

        case krpc_gap_scan_rpc_le_scan_stop_id:
            return rpc_le_scan_stop_shim(codec, messageFactory, sequence);

        default:
            return kErpcStatus_InvalidArgument;
    }
}

// Server shim for rpc_le_scan_set_param of rpc_gap_scan interface.
erpc_status_t rpc_gap_scan_service::rpc_le_scan_set_param_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    RPC_T_LE_SCAN_PARAM_TYPE param;
    binary_t *value = NULL;
    value = (binary_t *) erpc_malloc(sizeof(binary_t));
    if (value == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }
    int32_t _tmp_local;
    RPC_T_GAP_CAUSE result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&_tmp_local);
    param = static_cast<RPC_T_LE_SCAN_PARAM_TYPE>(_tmp_local);

    read_binary_t_struct(codec, value);

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_scan_set_param(param, value);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_scan_service_id, krpc_gap_scan_rpc_le_scan_set_param_id, sequence);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    if (value)
    {
        free_binary_t_struct(value);
    }
    if (value)
    {
        erpc_free(value);
    }

    return err;
}

// Server shim for rpc_le_scan_get_param of rpc_gap_scan interface.
erpc_status_t rpc_gap_scan_service::rpc_le_scan_get_param_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    RPC_T_LE_SCAN_PARAM_TYPE param;
    binary_t *value = NULL;
    int32_t _tmp_local;
    RPC_T_GAP_CAUSE result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&_tmp_local);
    param = static_cast<RPC_T_LE_SCAN_PARAM_TYPE>(_tmp_local);

    value = (binary_t *) erpc_malloc(sizeof(binary_t));
    if (value == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_scan_get_param(param, value);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_scan_service_id, krpc_gap_scan_rpc_le_scan_get_param_id, sequence);

        write_binary_t_struct(codec, value);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    if (value)
    {
        free_binary_t_struct(value);
    }
    if (value)
    {
        erpc_free(value);
    }

    return err;
}

// Server shim for rpc_le_scan_start of rpc_gap_scan interface.
erpc_status_t rpc_gap_scan_service::rpc_le_scan_start_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    RPC_T_GAP_CAUSE result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_scan_start();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_scan_service_id, krpc_gap_scan_rpc_le_scan_start_id, sequence);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    return err;
}

// Server shim for rpc_le_scan_stop of rpc_gap_scan interface.
erpc_status_t rpc_gap_scan_service::rpc_le_scan_stop_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    RPC_T_GAP_CAUSE result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (!err)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = rpc_le_scan_stop();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (!err)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, krpc_gap_scan_service_id, krpc_gap_scan_rpc_le_scan_stop_id, sequence);

        codec->write(static_cast<int32_t>(result));

        err = codec->getStatus();
    }

    return err;
}

erpc_service_t create_host_service()
{
    s_host_service.construct();
    return s_host_service.get();
}

void destroy_host_service()
{
    s_host_service.destroy();
}

erpc_service_t create_rpc_gap_adv_service()
{
    s_rpc_gap_adv_service.construct();
    return s_rpc_gap_adv_service.get();
}

void destroy_rpc_gap_adv_service()
{
    s_rpc_gap_adv_service.destroy();
}

erpc_service_t create_rpc_gap_le_service()
{
    s_rpc_gap_le_service.construct();
    return s_rpc_gap_le_service.get();
}

void destroy_rpc_gap_le_service()
{
    s_rpc_gap_le_service.destroy();
}

erpc_service_t create_rpc_gap_scan_service()
{
    s_rpc_gap_scan_service.construct();
    return s_rpc_gap_scan_service.get();
}

void destroy_rpc_gap_scan_service()
{
    s_rpc_gap_scan_service.destroy();
}
