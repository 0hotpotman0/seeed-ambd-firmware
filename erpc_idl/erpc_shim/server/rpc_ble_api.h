/*
 * Generated by erpcgen 1.7.4 on Tue Aug 18 14:47:31 2020.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#if !defined(_rpc_ble_api_h_)
#define _rpc_ble_api_h_

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include "erpc_version.h"

#if 10704 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

#if !defined(ERPC_TYPE_DEFINITIONS)
#define ERPC_TYPE_DEFINITIONS

// Enumerators data types declarations
/** @brief GAP Cause List */
typedef enum RPC_T_GAP_CAUSE
{
    RPC_GAP_CAUSE_SUCCESS = 0,//!< Operation success.
    RPC_GAP_CAUSE_ALREADY_IN_REQ = 1,//!< Operation already in progress.
    RPC_GAP_CAUSE_INVALID_STATE = 2,//!< Invalid state.
    RPC_GAP_CAUSE_INVALID_PARAM = 3,//!< Invalid parameter.
    RPC_GAP_CAUSE_NON_CONN = 4,//!< No connection establishment.
    RPC_GAP_CAUSE_NOT_FIND_IRK = 5,//!< IRK not found.
    RPC_GAP_CAUSE_ERROR_CREDITS = 6,//!< Credits error.
    RPC_GAP_CAUSE_SEND_REQ_FAILED = 7,//!< Send Request failed.
    RPC_GAP_CAUSE_NO_RESOURCE = 8,//!< No resource.
    RPC_GAP_CAUSE_INVALID_PDU_SIZE = 9,//!< Invalid PDU size.
    RPC_GAP_CAUSE_NOT_FIND = 10,//!< Not Found.
    RPC_GAP_CAUSE_CONN_LIMIT = 11,//!< Connection reachs limited count.
    RPC_GAP_CAUSE_NO_BOND = 12,//!< No Bond.
    RPC_GAP_CAUSE_ERROR_UNKNOWN = 255//!< Unknown error.
} RPC_T_GAP_CAUSE;

/** @brief LE advertising parameter types */
typedef enum RPC_T_LE_ADV_PARAM_TYPE
{
    RPC_GAP_PARAM_ADV_LOCAL_ADDR_TYPE = 608, //!< Advertisement used local bluetooth device address type. Read/Write Size is uint8.
    RPC_GAP_PARAM_ADV_DATA = 609, //!< Advertisement Data. Read/Write. Max size is uint8[GAP_MAX_ADV_LEN]. Default is "02:01:05", which means that it is a Limited Discoverable Advertisement.
    RPC_GAP_PARAM_SCAN_RSP_DATA = 610, //!< Scan Response Data. Read/Write. Max size is uint8[GAP_MAX_ADV_LEN]. Defaults to all 0.
    RPC_GAP_PARAM_ADV_EVENT_TYPE = 611, //!< Advertisement Type. Read/Write. Size is uint8.  Default is GAP_ADTYPE_ADV_IND (@ref T_GAP_ADTYPE).
    RPC_GAP_PARAM_ADV_DIRECT_ADDR_TYPE = 612, //!< Direct Advertisement Address Type. Read/Write. Size is uint8.
    RPC_GAP_PARAM_ADV_DIRECT_ADDR = 613, //!< Direct Advertisement Address. Read/Write. Size is uint8[GAP_BD_ADDR_LEN]. Default is NULL.
    RPC_GAP_PARAM_ADV_CHANNEL_MAP = 614, //!< Which channels to advertise on. Read/Write Size is uint8. Default is GAP_ADVCHAN_ALL (@ref ADV_CHANNEL_MAP)
    RPC_GAP_PARAM_ADV_FILTER_POLICY = 615, //!< Filter Policy. Ignored when directed advertising is used. Read/Write. Size is uint8. Default is GAP_ADV_FILTER_ANY (@ref T_GAP_ADV_FILTER_POLICY).
    RPC_GAP_PARAM_ADV_INTERVAL_MIN = 616, //!< Minimum advertising interval for undirected and low duty cycle directed advertising. Value range: 0x0020 - 0x4000 (20ms - 10240ms 0.625ms/step),Read/Write Size is uint16_t.
    RPC_GAP_PARAM_ADV_INTERVAL_MAX = 617 //!< Maximum advertising interval for undirected and low duty cycle directed  advertising. Value range: 0x0020 - 0x4000 (20ms - 10240ms 0.625ms/step)),Read/Write Size is uint16_t.
} RPC_T_LE_ADV_PARAM_TYPE;

/** @brief  GAP LE Parameter Types List.*/
typedef enum RPC_T_GAP_LE_PARAM_TYPE
{
    RPC_GAP_PARAM_DEV_STATE = 544, //!< Device's current GAP device state. Read/Write. Size is sizeof(TGapDevState).
    RPC_GAP_PARAM_APPEARANCE = 545, //!< Local Device's Appearance. Read/Write. size is uint16. Appearance value please refer to GAP Appearance Values.(@ref GAP_LE_APPEARANCE_VALUES)
    RPC_GAP_PARAM_DEVICE_NAME = 546, //!< Local Device's Name. Write Only. Name string length is GAP_DEVICE_NAME_LEN.
    RPC_GAP_PARAM_SLAVE_INIT_GATT_MTU_REQ = 547, //!< Slave initiate the GATT exchange MTU procedure. Write Only.
    RPC_GAP_PARAM_RANDOM_ADDR = 548, //!< Random address. Write Only.
    RPC_GAP_PARAM_LATEST_CONN_BD_ADDR = 550, //!< Latest connected bluetooth devive address. Read Only.
    RPC_GAP_PARAM_LATEST_CONN_BD_ADDR_TYPE = 551, //!< Latest connected bluetooth devive address type. Read Only.
    RPC_GAP_PARAM_HANDLE_CREATE_CONN_IND = 552, //!< App handle the create connection indication message.
    RPC_GAP_PARAM_DEFAULT_PHYS_PREFER = 553, //!< Preferred values for the transmitter PHY and receiver PHY to be used for all subsequent connections over the LE transport.
    RPC_GAP_PARAM_DEFAULT_TX_PHYS_PREFER = 554, //!< The transmitter PHYs that the Host prefers the Controller to use.
    RPC_GAP_PARAM_DEFAULT_RX_PHYS_PREFER = 555, //!< The receiver PHYs that the Host prefers the Controller to use.
    RPC_GAP_PARAM_DEFAULT_DATA_LEN_MAX_TX_OCTETS = 558,
    RPC_GAP_PARAM_DEFAULT_DATA_LEN_MAX_TX_TIME = 559,
    RPC_GAP_PARAM_LOCAL_FEATURES = 560, //!< Local supported features.
    RPC_GAP_PARAM_DS_POOL_ID = 561, //!< Downstream PoolID.  Read only.  size is uint16.
    RPC_GAP_PARAM_DS_DATA_OFFSET = 562, //!< Downstream pool buffer data offset.  Read only.  size is uint16.
    RPC_GAP_PARAM_LE_REMAIN_CREDITS = 563, //!< Remain credits avaiable for TX.  Read only.  size is uint16.
    RPC_GAP_PARAM_MAX_WL_SIZE = 564 //!< Max white list size.  Read only.  size is uint16.
} RPC_T_GAP_LE_PARAM_TYPE;

/** @brief LE scan parameter type */
typedef enum RPC_T_LE_SCAN_PARAM_TYPE
{
    RPC_GAP_PARAM_SCAN_LOCAL_ADDR_TYPE = 576,  //!< The type of address being used in the scan request packets. Read/Write.
    RPC_GAP_PARAM_SCAN_MODE = 577,  //!< Scan mode. Read/Write. Size is uint8. Default is GAP_SCAN_MODE_ACTIVE (@ref T_GAP_SCAN_MODE).
    RPC_GAP_PARAM_SCAN_INTERVAL = 578,  //!< Scan Interval. Read/Write. Size is uint16_t. Default is 0x10. Value range: 0x0004 - 0x4000 (2.5ms - 10240ms 0.625ms/step).
    RPC_GAP_PARAM_SCAN_WINDOW = 579,  //!< Scan Window. Read/Write. Size is uint16_t. Default is 0x10. Value range: 0x0004 - 0x4000 (2.5ms - 10240ms 0.625ms/step).
    RPC_GAP_PARAM_SCAN_FILTER_POLICY = 580,  //!< Scan Filter Policy.Read/Write. Size is uint8_t. Default is GAP_SCAN_FILTER_ANY (@ref T_GAP_SCAN_FILTER_POLICY).
    RPC_GAP_PARAM_SCAN_FILTER_DUPLICATES = 581   //!< Scan Filter Duplicates.Read/Write. Size is uint8_t. Default is GAP_SCAN_FILTER_DUPLICATE_DISABLE (@ref T_GAP_SCAN_FILTER_DUPLICATE).
} RPC_T_LE_SCAN_PARAM_TYPE;

/** @brief  Definition of LE white list operation.*/
typedef enum RPC_T_GAP_WHITE_LIST_OP
{
    RPC_GAP_WHITE_LIST_OP_CLEAR = 0,    /**<  Clear white list. */
    RPC_GAP_WHITE_LIST_OP_ADD = 1,          /**<  Add a device to the white list. */
    RPC_GAP_WHITE_LIST_OP_REMOVE = 2        /**<  Remove a device from the white list. */
} RPC_T_GAP_WHITE_LIST_OP;

/** @brief GAP Remote Address Type */
typedef enum RPC_T_GAP_REMOTE_ADDR_TYPE
{
    RPC_GAP_REMOTE_ADDR_LE_PUBLIC = 0, /**< LE Public device address type. */
    RPC_GAP_REMOTE_ADDR_LE_RANDOM = 1 /**< LE Random device address type. */
} RPC_T_GAP_REMOTE_ADDR_TYPE;

/** @brief Define random adress type */
typedef enum RPC_T_GAP_RAND_ADDR_TYPE
{
    RPC_GAP_RAND_ADDR_STATIC = 0,/**<  Static random device address. */
    RPC_GAP_RAND_ADDR_NON_RESOLVABLE = 1,/**<  Non resolvable random device address. */
    RPC_GAP_RAND_ADDR_RESOLVABLE = 2 /**<  Resolvable random device address. */
} RPC_T_GAP_RAND_ADDR_TYPE;

/** @brief Define indentify address type */
typedef enum RPC_T_GAP_IDENT_ADDR_TYPE
{
    RPC_GAP_IDENT_ADDR_PUBLIC = 0,
    RPC_GAP_IDENT_ADDR_RAND = 1
} RPC_T_GAP_IDENT_ADDR_TYPE;

/** @brief GAP gatt cccd not check. */
typedef enum RPC_T_GAP_CONFIG_GATT_CCCD_NOT_CHECK
{
    RPC_CONFIG_GATT_CCCD_CHECK = 0,         /**< Check cccd when server sends notification or indication. */
    RPC_CONFIG_GATT_CCCD_NOT_CHECK = 1     /**< Not check cccd when server sends notification or indication. */
} RPC_T_GAP_CONFIG_GATT_CCCD_NOT_CHECK;

/** @brief GAP Parameter List */
typedef enum RPC_T_GAP_PARAM_TYPE
{
    RPC_GAP_PARAM_BD_ADDR = 512,//!< Locol Device's Address. Read Only. Size is uint8[GAP_BD_ADDR_LEN]. This item is read from the controller.
    RPC_GAP_PARAM_BOND_PAIRING_MODE = 514,//!< Pairing Mode of LE and BR/EDR. Write Only. Size is uint8_t. Default is GAP_PAIRING_MODE_PAIRABLE (@ref BOND_PAIRING_MODE_DEFINES).
    RPC_GAP_PARAM_BOND_AUTHEN_REQUIREMENTS_FLAGS = 515,//!< Man-In-The-Middle (MITM) basically turns on Passkey protection in the pairing algorithm. Read/Write. Size is uint8_t. Default is GAP_AUTHEN_NO_MITM_YES_BOND (@ref BOND_MITM_DEFINES).
    RPC_GAP_PARAM_BOND_IO_CAPABILITIES = 516,//!< I/O capabilities.  Read/Write. Size is uint8_t. Default is GAP_IO_CAP_NO_INPUT_NO_OUTPUT (@ref T_GAP_IO_CAP).
    RPC_GAP_PARAM_BOND_OOB_ENABLED = 517,//!< OOB data available for pairing algorithm. Read/Write. Size is uint8_t. Default is 0(disabled).
    RPC_GAP_PARAM_BOND_LE_PAIRING_MODE = 519//!< LE Pairing Mode. Read/Write. Size is uint8_t. Default is GAP_PAIRING_MODE_PAIRABLE (@ref BOND_PAIRING_MODE_DEFINES).
} RPC_T_GAP_PARAM_TYPE;

/** @brief LE bond parameter types */
typedef enum RPC_T_LE_BOND_PARAM_TYPE
{
    RPC_GAP_PARAM_BOND_OOB_DATA = 528,//!< OOB Data. Read/Write. size uint8_t[16]. Default is all 0's.
    RPC_GAP_PARAM_BOND_FIXED_PASSKEY = 529,//!< The fix passcode for MITM protection. Read/Write. size is uint32_t. Range is 0 - 999,999. Default is 0.
    RPC_GAP_PARAM_BOND_FIXED_PASSKEY_ENABLE = 530,//!< The fix passcode available for pairing. Read/Write. size is uint8_t. Default is 0(disabled).
    RPC_GAP_PARAM_BOND_SEC_REQ_ENABLE = 531,//!< Send smp security request when connected. Read/Write. size is uint8_t. Default is 0(disabled).
    RPC_GAP_PARAM_BOND_SEC_REQ_REQUIREMENT = 532,//!< Security request requirements. Read/Write. size is uint8_t. Default is GAP_AUTHEN_BIT_BONDING_FLAG (@ref BOND_MITM_DEFINES)
    RPC_GAP_PARAM_BOND_MIN_KEY_SIZE = 533,//!< Minium LTK size required. Read/Write. size is uint8_t.
    RPC_GAP_PARAM_BOND_KEY_MANAGER = 536,//!< Key manager. Write only. size is uint8_t. Default is 0(disabled).
    RPC_GAP_PARAM_BOND_SIGN_KEY_FLAG = 537//!< Sign key flag configure. Write only. size is uint8_t. Default is 0(disabled).
} RPC_T_LE_BOND_PARAM_TYPE;

/** @brief  GAP Confirmation Cause List */
typedef enum RPC_T_GAP_CFM_CAUSE
{
    RPC_GAP_CFM_CAUSE_ACCEPT = 1,    /**< Accept for indication, only used when confirmation. */
    RPC_GAP_CFM_CAUSE_REJECT = 2    /**< Reject for indication, only used when confirmation. */
} RPC_T_GAP_CFM_CAUSE;

/** @brief Definition of security level. */
typedef enum RPC_T_GAP_SEC_LEVEL
{
    RPC_GAP_SEC_LEVEL_NO = 0,   /**< No security (No authentication and no encryption).*/
    RPC_GAP_SEC_LEVEL_UNAUTHEN = 4,   /**< Unauthenticated pairing with encryption.*/
    RPC_GAP_SEC_LEVEL_AUTHEN = 5,   /**< Authenticated pairing with encryption.*/
    RPC_GAP_SEC_LEVEL_SC_UNAUTHEN = 7,   /**< Unuthenticated LE Secure Connections pairing with encryption using a 128-bit strength encryption key.*/
    RPC_GAP_SEC_LEVEL_SC_AUTHEN = 8    /**< Authenticated LE Secure Connections pairing with encryption using a 128-bit strength encryption key.*/
} RPC_T_GAP_SEC_LEVEL;

/** @brief LE connection parameter types */
typedef enum RPC_T_LE_CONN_PARAM_TYPE
{
    RPC_GAP_PARAM_CONN_BD_ADDR = 624, //!< Address of connected device. Read only. Size is uint8[B_MAX_ADV_LEN]. Set to all zeros when not connected.
    RPC_GAP_PARAM_CONN_BD_ADDR_TYPE = 625, //!< Address type of connected device. Read only. Size is uint8. Set to zero when not connected.
    RPC_GAP_PARAM_CONN_INTERVAL = 626, //!< Current connection interval.  Read only. Size is uint16.  Range is 7.5ms to 4 seconds (0x0006 to 0x0C80).  Default is 0 (no connection).
    RPC_GAP_PARAM_CONN_LATENCY = 627, //!< Current slave latency.  Read only.  Size is uint16.  Range is 0 to 499. Default is 0 (no slave latency or no connection).
    RPC_GAP_PARAM_CONN_TIMEOUT = 628, //!< Current timeout value.  Read only.  size is uint16.  Range is 100ms to 32 seconds.  Default is 0 (no connection).
    RPC_GAP_PARAM_CONN_MTU_SIZE = 629, //!< MTU size.  Read only.  size is uint16.
    RPC_GAP_PARAM_CONN_LOCAL_BD_TYPE = 630, //!< Local bluetooth address type.  Read only.  size is 1 byte.
    RPC_GAP_PARAM_CONN_RX_PHY_TYPE = 631, //!< Rx phy type.  Read only.  size is 1 byte.
    RPC_GAP_PARAM_CONN_TX_PHY_TYPE = 632, //!< Tx phy type.  Read only.  size is 1 byte.
    RPC_GAP_PARAM_CONN_REMOTE_FEATURES = 633, //!< Remote supported features.  Read only.
    RPC_GAP_PARAM_CONN_HANDLE = 635 //!< LE link connection handle. Read only.
} RPC_T_LE_CONN_PARAM_TYPE;

/** @brief GAP connection states*/
typedef enum RPC_T_GAP_CONN_STATE
{
    RPC_GAP_CONN_STATE_DISCONNECTED = 0, //!< Disconnected.
    RPC_GAP_CONN_STATE_CONNECTING = 1,   //!< Connecting.
    RPC_GAP_CONN_STATE_CONNECTED = 2,    //!< Connected.
    RPC_GAP_CONN_STATE_DISCONNECTING = 3 //!< Disconnecting.
} RPC_T_GAP_CONN_STATE;

/** @brief GAP link roles */
typedef enum RPC_T_GAP_ROLE
{
    RPC_GAP_LINK_ROLE_UNDEFINED = 0,    //!< Unknown.
    RPC_GAP_LINK_ROLE_MASTER = 1,       //!< Role is master.
    RPC_GAP_LINK_ROLE_SLAVE = 2         //!< Role is slave.
} RPC_T_GAP_ROLE;

/** @brief  Definition of LE Coded PHY preference options.*/
typedef enum RPC_T_GAP_PHYS_OPTIONS
{
    RPC_GAP_PHYS_OPTIONS_CODED_PREFER_NO = 0,/**< Host has no preferred coding when transmitting on the LE Coded PHY */
    RPC_GAP_PHYS_OPTIONS_CODED_PREFER_S2 = 1,/**< Host prefers that S=2 coding be used when transmitting on the LE Coded PHY */
    RPC_GAP_PHYS_OPTIONS_CODED_PREFER_S8 = 2 /**< Host prefers that S=8 coding be used when transmitting on the LE Coded PHY */
} RPC_T_GAP_PHYS_OPTIONS;

/** @brief GAP connection phy types*/
typedef enum RPC_T_GAP_CONN_PARAM_TYPE
{
    RPC_GAP_CONN_PARAM_1M = 0
} RPC_T_GAP_CONN_PARAM_TYPE;

/** @brief define local adress type */
typedef enum RPC_T_GAP_LOCAL_ADDR_TYPE
{
    RPC_GAP_LOCAL_ADDR_LE_PUBLIC = 0,    /**<  Bluetooth low energy public address. */
    RPC_GAP_LOCAL_ADDR_LE_RANDOM = 1    /**<  Bluetooth low energy random address. */
} RPC_T_GAP_LOCAL_ADDR_TYPE;

// Aliases data types declarations
typedef struct binary_t binary_t;
typedef struct RPC_T_GAP_CONN_INFO RPC_T_GAP_CONN_INFO;
typedef struct RPC_T_GAP_LE_CONN_REQ_PARAM RPC_T_GAP_LE_CONN_REQ_PARAM;

// Structures/unions data types declarations
struct binary_t
{
    uint8_t * data;
    uint32_t dataLength;
};

/** @brief  Connected device information.*/
struct RPC_T_GAP_CONN_INFO
{
    RPC_T_GAP_CONN_STATE conn_state;             //!< Connection state
    RPC_T_GAP_ROLE role;                   //!< Device role
    uint8_t remote_bd[6];              //!< Remote address
    uint8_t remote_bd_type;         //!< Remote address type
};

/** @brief  Definition of LE connection request parameter.*/
struct RPC_T_GAP_LE_CONN_REQ_PARAM
{
    uint16_t scan_interval;/**< Time interval from when the Controller started its last scan
                                until it begins the subsequent scan on the primary advertising channel.

                                Range: 0x0004 to 0x4000
                                Time = N * 0.625 ms
                                Time Range: 2.5 ms to 10.24 s

                                Range: 0x0004 to 0xFFFF
                                Time = N * 0.625 ms
                                Time Range: 2.5 ms to 40.959375 s */
    uint16_t scan_window;/**< Duration of the scan on the primary advertising channel.
                              Range: 0x0004 to 0x4000
                              Time = N * 0.625 ms
                              Time Range: 2.5 ms to 10.24 s

                              Range: 0x0004 to 0xFFFF
                              Time = N * 0.625 ms
                              Time Range: 2.5 ms to 40.959375 s */
    uint16_t conn_interval_min;/**< Minimum value for the connection interval. This shall be less
                                    than or equal to Conn_Interval_Max[i].
                                    Range: 0x0006 to 0x0C80
                                    Time = N * 1.25 ms
                                    Time Range: 7.5 ms to 4 s */
    uint16_t conn_interval_max;/**< Maximum value for the connection interval. This shall be greater
                                    than or equal to Conn_Interval_Max[i].
                                    Range: 0x0006 to 0x0C80
                                    Time = N * 1.25 ms
                                    Time Range: 7.5 ms to 4 s */
    uint16_t conn_latency;/**< Slave latency for the connection in number of connection events.
                               Range: 0x0000 to 0x01F3 */
    uint16_t supv_tout;/**< Supervision timeout for the LE Link.
                            Range: 0x000A to 0x0C80
                            Time = N * 10 ms
                            Time Range: 100 ms to 32 s */
    uint16_t ce_len_min;/**< Informative parameter recommending the minimum length of connection
                             event needed for this LE connection.
                             Range: 0x0000 - 0xFFFF
                             Time = N * 0.625 ms */
    uint16_t ce_len_max;/**< Informative parameter recommending the maximum length of connection
                             event needed for this LE connection.
                             Range: 0x0000 - 0xFFFF
                             Time = N * 0.625 ms */
};


#endif // ERPC_TYPE_DEFINITIONS

/*! @brief host identifiers */
enum _host_ids
{
    khost_service_id = 1,
    khost__Ble_HostInitialize_id = 1,
};

/*! @brief rpc_gap identifiers */
enum _rpc_gap_ids
{
    krpc_gap_service_id = 2,
    krpc_gap_rpc_gap_set_param_id = 1,
    krpc_gap_rpc_gap_get_param_id = 2,
    krpc_gap_rpc_gap_set_pairable_mode_id = 3,
};

/*! @brief rpc_gap_bone identifiers */
enum _rpc_gap_bone_ids
{
    krpc_gap_bone_service_id = 3,
    krpc_gap_bone_rpc_le_bond_set_param_id = 1,
    krpc_gap_bone_rpc_le_bond_get_param_id = 2,
    krpc_gap_bone_rpc_le_bond_pair_id = 3,
    krpc_gap_bone_rpc_le_bond_get_display_key_id = 4,
    krpc_gap_bone_rpc_le_bond_passkey_input_confirm_id = 5,
    krpc_gap_bone_rpc_le_bond_oob_input_confirm_id = 6,
    krpc_gap_bone_rpc_le_bond_just_work_confirm_id = 7,
    krpc_gap_bone_rpc_le_bond_passkey_display_confirm_id = 8,
    krpc_gap_bone_rpc_le_bond_user_confirm_id = 9,
    krpc_gap_bone_rpc_le_bond_cfg_local_key_distribute_id = 10,
    krpc_gap_bone_rpc_le_bond_clear_all_keys_id = 11,
    krpc_gap_bone_rpc_le_bond_delete_by_idx_id = 12,
    krpc_gap_bone_rpc_le_bond_delete_by_bd_id = 13,
    krpc_gap_bone_rpc_le_bond_get_sec_level_id = 14,
};

/*! @brief rpc_gap_le identifiers */
enum _rpc_gap_le_ids
{
    krpc_gap_le_service_id = 4,
    krpc_gap_le_rpc_le_gap_init_id = 1,
    krpc_gap_le_rpc_le_gap_msg_info_way_id = 2,
    krpc_gap_le_rpc_le_get_max_link_num_id = 3,
    krpc_gap_le_rpc_le_set_gap_param_id = 4,
    krpc_gap_le_rpc_le_get_gap_param_id = 5,
    krpc_gap_le_rpc_le_modify_white_list_id = 6,
    krpc_gap_le_rpc_le_gen_rand_addr_id = 7,
    krpc_gap_le_rpc_le_set_rand_addr_id = 8,
    krpc_gap_le_rpc_le_cfg_local_identity_address_id = 9,
    krpc_gap_le_rpc_le_set_host_chann_classif_id = 10,
    krpc_gap_le_rpc_le_write_default_data_len_id = 11,
};

/*! @brief rpc_gap_config identifiers */
enum _rpc_gap_config_ids
{
    krpc_gap_config_service_id = 5,
    krpc_gap_config_rpc_gap_config_cccd_not_check_id = 1,
    krpc_gap_config_rpc_gap_config_ccc_bits_count_id = 2,
    krpc_gap_config_rpc_gap_config_max_attribute_table_count_id = 3,
    krpc_gap_config_rpc_gap_config_max_mtu_size_id = 4,
    krpc_gap_config_rpc_gap_config_bte_pool_size_id = 5,
    krpc_gap_config_rpc_gap_config_bt_report_buf_num_id = 6,
    krpc_gap_config_rpc_gap_config_le_key_storage_flag_id = 7,
    krpc_gap_config_rpc_gap_config_max_le_paired_device_id = 8,
    krpc_gap_config_rpc_gap_config_max_le_link_num_id = 9,
};

/*! @brief rpc_gap_adv identifiers */
enum _rpc_gap_adv_ids
{
    krpc_gap_adv_service_id = 6,
    krpc_gap_adv_rpc_le_adv_set_param_id = 1,
    krpc_gap_adv_rpc_le_adv_get_param_id = 2,
    krpc_gap_adv_rpc_le_adv_start_id = 3,
    krpc_gap_adv_rpc_le_adv_stop_id = 4,
    krpc_gap_adv_rpc_le_adv_update_param_id = 5,
};

/*! @brief rpc_gap_scan identifiers */
enum _rpc_gap_scan_ids
{
    krpc_gap_scan_service_id = 7,
    krpc_gap_scan_rpc_le_scan_set_param_id = 1,
    krpc_gap_scan_rpc_le_scan_get_param_id = 2,
    krpc_gap_scan_rpc_le_scan_start_id = 3,
    krpc_gap_scan_rpc_le_scan_stop_id = 4,
};

/*! @brief rpc_gap_conn identifiers */
enum _rpc_gap_conn_ids
{
    krpc_gap_conn_service_id = 8,
    krpc_gap_conn_rpc_le_get_conn_param_id = 1,
    krpc_gap_conn_rpc_le_get_conn_info_id = 2,
    krpc_gap_conn_rpc_le_get_conn_addr_id = 3,
    krpc_gap_conn_rpc_le_get_conn_id_id = 4,
    krpc_gap_conn_rpc_le_get_active_link_num_id = 5,
    krpc_gap_conn_rpc_le_get_idle_link_num_id = 6,
    krpc_gap_conn_rpc_le_disconnect_id = 7,
    krpc_gap_conn_rpc_le_read_rssi_id = 8,
    krpc_gap_conn_rpc_le_set_data_len_id = 9,
    krpc_gap_conn_rpc_le_set_phy_id = 10,
    krpc_gap_conn_rpc_le_set_conn_param_id = 11,
    krpc_gap_conn_rpc_le_connect_id = 12,
    krpc_gap_conn_rpc_le_update_conn_param_id = 13,
};

#if defined(__cplusplus)
extern "C" {
#endif

//! @name host
//@{
uint8_t _Ble_HostInitialize(void);
//@}

//! @name rpc_gap
//@{
RPC_T_GAP_CAUSE rpc_gap_set_param(RPC_T_GAP_PARAM_TYPE param, const binary_t * value);

RPC_T_GAP_CAUSE rpc_gap_get_param(RPC_T_GAP_PARAM_TYPE param, binary_t * value);

RPC_T_GAP_CAUSE rpc_gap_set_pairable_mode(void);
//@}

//! @name rpc_gap_bone
//@{
RPC_T_GAP_CAUSE rpc_le_bond_set_param(RPC_T_LE_BOND_PARAM_TYPE param, const binary_t * value);

RPC_T_GAP_CAUSE rpc_le_bond_get_param(RPC_T_LE_BOND_PARAM_TYPE param, binary_t * value);

RPC_T_GAP_CAUSE rpc_le_bond_pair(uint8_t conn_id);

RPC_T_GAP_CAUSE rpc_le_bond_get_display_key(uint8_t conn_id, binary_t * key);

RPC_T_GAP_CAUSE rpc_le_bond_passkey_input_confirm(uint8_t conn_id, uint32_t passcode, RPC_T_GAP_CFM_CAUSE cause);

RPC_T_GAP_CAUSE rpc_le_bond_oob_input_confirm(uint8_t conn_id, RPC_T_GAP_CFM_CAUSE cause);

RPC_T_GAP_CAUSE rpc_le_bond_just_work_confirm(uint8_t conn_id, RPC_T_GAP_CFM_CAUSE cause);

RPC_T_GAP_CAUSE rpc_le_bond_passkey_display_confirm(uint8_t conn_id, RPC_T_GAP_CFM_CAUSE cause);

RPC_T_GAP_CAUSE rpc_le_bond_user_confirm(uint8_t conn_id, RPC_T_GAP_CFM_CAUSE cause);

RPC_T_GAP_CAUSE rpc_le_bond_cfg_local_key_distribute(uint8_t init_dist, uint8_t rsp_dist);

void rpc_le_bond_clear_all_keys(void);

RPC_T_GAP_CAUSE rpc_le_bond_delete_by_idx(uint8_t idx);

RPC_T_GAP_CAUSE rpc_le_bond_delete_by_bd(const uint8_t bd_addr[6], RPC_T_GAP_REMOTE_ADDR_TYPE bd_type);

RPC_T_GAP_CAUSE rpc_le_bond_get_sec_level(uint8_t conn_id, RPC_T_GAP_SEC_LEVEL * sec_type);
//@}

//! @name rpc_gap_le
//@{
bool rpc_le_gap_init(uint8_t link_num);

void rpc_le_gap_msg_info_way(bool use_msg);

uint8_t rpc_le_get_max_link_num(void);

RPC_T_GAP_CAUSE rpc_le_set_gap_param(RPC_T_GAP_LE_PARAM_TYPE param, const binary_t * value);

RPC_T_GAP_CAUSE rpc_le_get_gap_param(RPC_T_GAP_LE_PARAM_TYPE param, binary_t * value);

RPC_T_GAP_CAUSE rpc_le_modify_white_list(RPC_T_GAP_WHITE_LIST_OP operation, const uint8_t bd_addr[6], RPC_T_GAP_REMOTE_ADDR_TYPE bd_type);

RPC_T_GAP_CAUSE rpc_le_gen_rand_addr(RPC_T_GAP_RAND_ADDR_TYPE rand_addr_type, uint8_t random_bd[6]);

RPC_T_GAP_CAUSE rpc_le_set_rand_addr(const uint8_t random_bd[6]);

RPC_T_GAP_CAUSE rpc_le_cfg_local_identity_address(const uint8_t addr[6], RPC_T_GAP_IDENT_ADDR_TYPE ident_addr_type);

RPC_T_GAP_CAUSE rpc_le_set_host_chann_classif(const binary_t * p_channel_map);

RPC_T_GAP_CAUSE rpc_le_write_default_data_len(uint16_t tx_octets, uint16_t tx_time);
//@}

//! @name rpc_gap_config
//@{
void rpc_gap_config_cccd_not_check(RPC_T_GAP_CONFIG_GATT_CCCD_NOT_CHECK cccd_not_check_flag);

void rpc_gap_config_ccc_bits_count(uint8_t gatt_server_ccc_bits_count, uint8_t gatt_storage_ccc_bits_count);

void rpc_gap_config_max_attribute_table_count(uint8_t gatt_max_attribute_table_count);

void rpc_gap_config_max_mtu_size(uint16_t att_max_mtu_size);

void rpc_gap_config_bte_pool_size(uint8_t bte_pool_size);

void rpc_gap_config_bt_report_buf_num(uint8_t bt_report_buf_num);

void rpc_gap_config_le_key_storage_flag(uint16_t le_key_storage_flag);

void rpc_gap_config_max_le_paired_device(uint8_t max_le_paired_device);

void rpc_gap_config_max_le_link_num(uint8_t le_link_num);
//@}

//! @name rpc_gap_adv
//@{
RPC_T_GAP_CAUSE rpc_le_adv_set_param(RPC_T_LE_ADV_PARAM_TYPE param, const binary_t * value);

RPC_T_GAP_CAUSE rpc_le_adv_get_param(RPC_T_LE_ADV_PARAM_TYPE param, binary_t * value);

RPC_T_GAP_CAUSE rpc_le_adv_start(void);

RPC_T_GAP_CAUSE rpc_le_adv_stop(void);

RPC_T_GAP_CAUSE rpc_le_adv_update_param(void);
//@}

//! @name rpc_gap_scan
//@{
RPC_T_GAP_CAUSE rpc_le_scan_set_param(RPC_T_LE_SCAN_PARAM_TYPE param, const binary_t * value);

RPC_T_GAP_CAUSE rpc_le_scan_get_param(RPC_T_LE_SCAN_PARAM_TYPE param, binary_t * value);

RPC_T_GAP_CAUSE rpc_le_scan_start(void);

RPC_T_GAP_CAUSE rpc_le_scan_stop(void);
//@}

//! @name rpc_gap_conn
//@{
RPC_T_GAP_CAUSE rpc_le_get_conn_param(RPC_T_LE_CONN_PARAM_TYPE param, binary_t * value, uint8_t conn_id);

bool rpc_le_get_conn_info(uint8_t conn_id, RPC_T_GAP_CONN_INFO * p_conn_info);

bool rpc_le_get_conn_addr(uint8_t conn_id, uint8_t bd_addr[6], uint8_t * bd_type);

bool rpc_le_get_conn_id(const uint8_t bd_addr[6], uint8_t bd_type, uint8_t * p_conn_id);

uint8_t rpc_le_get_active_link_num(void);

uint8_t rpc_le_get_idle_link_num(void);

RPC_T_GAP_CAUSE rpc_le_disconnect(uint8_t conn_id);

RPC_T_GAP_CAUSE rpc_le_read_rssi(uint8_t conn_id);

RPC_T_GAP_CAUSE rpc_le_set_data_len(uint8_t conn_id, uint16_t tx_octets, uint16_t tx_time);

RPC_T_GAP_CAUSE rpc_le_set_phy(uint8_t conn_id, uint8_t all_phys, uint8_t tx_phys, uint8_t rx_phys, RPC_T_GAP_PHYS_OPTIONS phy_options);

RPC_T_GAP_CAUSE rpc_le_set_conn_param(RPC_T_GAP_CONN_PARAM_TYPE conn_type, const RPC_T_GAP_LE_CONN_REQ_PARAM * p_conn_param);

RPC_T_GAP_CAUSE rpc_le_connect(uint8_t init_phys, const uint8_t remote_bd[6], RPC_T_GAP_CONN_PARAM_TYPE remote_bd_type, RPC_T_GAP_LOCAL_ADDR_TYPE local_bd_type, uint16_t scan_timeout);

RPC_T_GAP_CAUSE rpc_le_update_conn_param(uint8_t conn_id, uint16_t conn_interval_min, uint16_t conn_interval_max, uint16_t conn_latency, uint16_t supervision_timeout, uint16_t ce_length_min, uint16_t ce_length_max);
//@}

#if defined(__cplusplus)
}
#endif

#endif // _rpc_ble_api_h_
